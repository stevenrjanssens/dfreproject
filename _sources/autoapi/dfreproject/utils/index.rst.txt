dfreproject.utils
=================

.. py:module:: dfreproject.utils


Attributes
----------

.. autoapisummary::

   dfreproject.utils.logger


Functions
---------

.. autoapisummary::

   dfreproject.utils.get_device
   dfreproject.utils.gradient2d
   dfreproject.utils.estimate_memory_per_pixel
   dfreproject.utils.calculate_chunk_size
   dfreproject.utils.process_chunk
   dfreproject.utils.reproject_chunked


Module Contents
---------------

.. py:data:: logger

.. py:function:: get_device()

   Utility function to get the currently available PyTorch device.

   :returns: Available torch device (either cuda or cpu).
   :rtype: torch.device


.. py:function:: gradient2d(tensor)

   Compute gradients (dy, dx) of a 2D tensor using centered differences.


.. py:function:: estimate_memory_per_pixel(reproject_instance, interpolation_mode: str) -> float

   Estimate memory usage per output pixel in bytes.

   :param reproject_instance: An initialized Reproject instance.
   :type reproject_instance: Reproject
   :param interpolation_mode: Interpolation mode being used.
   :type interpolation_mode: str

   :returns: Estimated bytes per pixel.
   :rtype: float


.. py:function:: calculate_chunk_size(reproject_instance, output_shape: Tuple[int, int], max_memory_mb: float, safety_factor: float, interpolation_mode: str = 'bilinear') -> Tuple[int, int]

   Calculate optimal chunk size based on memory constraints.

   :param reproject_instance: An initialized Reproject instance.
   :type reproject_instance: Reproject
   :param output_shape: Shape of the output image (H, W).
   :type output_shape: Tuple[int, int]
   :param max_memory_mb: Maximum memory to use in megabytes.
   :type max_memory_mb: float
   :param safety_factor: Safety factor (0-1) for memory calculation.
   :type safety_factor: float
   :param interpolation_mode: Interpolation mode to use.
   :type interpolation_mode: str

   :returns: Chunk size (chunk_height, chunk_width).
   :rtype: Tuple[int, int]


.. py:function:: process_chunk(reproject_instance, y_start: int, y_end: int, x_start: int, x_end: int, interpolation_mode: str = 'bilinear') -> torch.Tensor

   Process a single chunk of the reprojection.

   :param reproject_instance: An initialized Reproject instance.
   :type reproject_instance: Reproject
   :param y_start: Y-axis range for the chunk.
   :type y_start: int
   :param y_end: Y-axis range for the chunk.
   :type y_end: int
   :param x_start: X-axis range for the chunk.
   :type x_start: int
   :param x_end: X-axis range for the chunk.
   :type x_end: int
   :param interpolation_mode: Interpolation mode.
   :type interpolation_mode: str

   :returns: Reprojected chunk.
   :rtype: torch.Tensor


.. py:function:: reproject_chunked(reproject_instance, max_memory_mb: float, safety_factor: float, interpolation_mode: str = 'bilinear', show_progress: bool = True) -> torch.Tensor

   Perform chunked reprojection.

   :param reproject_instance: An initialized Reproject instance.
   :type reproject_instance: Reproject
   :param max_memory_mb: Maximum memory to use in megabytes.
   :type max_memory_mb: float
   :param safety_factor: Safety factor for memory calculation.
   :type safety_factor: float
   :param interpolation_mode: Interpolation mode to use.
   :type interpolation_mode: str
   :param show_progress: Whether to log progress information.
   :type show_progress: bool

   :returns: Full reprojected image.
   :rtype: torch.Tensor


